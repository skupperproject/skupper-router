#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

name: Build

on:
  push:
  pull_request:
  workflow_dispatch:
    inputs:
      protonRepository:
        description: GitHub repository where to fetch Qpid Proton from
        type: string
        default: 'apache/qpid-proton'
        required: false
      protonBranch:
        description: Branch in the protonRepository to check out (in addition to hardcoded branches)
        type: string
        default: main
        required: false

# known limitation https://github.com/actions/runner/issues/480
env:
  protonRepository: "${{ github.event.inputs.protonRepository || 'apache/qpid-proton' }}"
  protonBranch: "${{ github.event.inputs.protonBranch || 'main' }}"

jobs:
  container:
    name: Container image
    runs-on: ubuntu-latest
    env:
      ImageName: local/skupper-router:local

    steps:

      - uses: actions/checkout@v4

      # https://podman.io/docs/installation
      - name: Install brew
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          echo "PATH=/home/linuxbrew/.linuxbrew/bin:${PATH}" >> "${GITHUB_ENV}"

      - name: Install podman
        run: |
          brew install podman
          brew services start podman
          echo "PODMAN_SOCK=/run/user/${UID}/podman/podman.sock" >> $GITHUB_ENV
          echo "DOCKER_HOST=unix:///run/user/${UID}/podman/podman.sock" >> $GITHUB_ENV
        env:
          HOMEBREW_NO_INSTALL_CLEANUP: 1

      - name: Build Containerfile
        run: |
          podman build -t ${{ env.ImageName }} -f ./Containerfile .

      # When rustup is updated, it tries to replace its binary, which on Windows is somehow locked.
      # This can result in a CI failure, see: https://github.com/rust-lang/rustup/issues/3029
      - name: Install rust with rustup
        run: |
          rustup set auto-self-update disable
          rustup toolchain install stable --profile minimal

      - uses: Swatinem/rust-cache@v2

      - name: Compile and run .rs tests
        run: |
          cargo check
          cargo test -- --test-threads=1 --nocapture
        env:
          QDROUTERD_IMAGE: ${{ env.ImageName }}
          CARGO_INCREMENTAL: 0
          RUST_LOG: info
          RUST_BACKTRACE: 1

      # Trivy and Grype are the scanners that GitLab integrates with (at the time of writing)

      - name: Run Trivy security scan on the image
        if: ${{ ! cancelled() }}
        # https://aquasecurity.github.io/trivy/v0.43/getting-started/installation/#use-container-image
        run: |
          podman run --rm \
            -v ${PODMAN_SOCK}:/var/run/docker.sock \
            -v ${{github.workspace}}:${{github.workspace}} \
            docker.io/aquasec/trivy:latest \
              image \
              --scanners vuln,secret --ignore-unfixed --exit-code=1 \
              --secret-config=${{github.workspace}}/.github/trivy-secret.yaml \
              ${{ env.ImageName }}

      - name: Run Grype security scan on the image
        if: ${{ ! cancelled() }}
        # https://github.com/anchore/grype#getting-started
        run: |
          podman run --rm --volume ${PODMAN_SOCK}:/var/run/docker.sock docker.io/anchore/grype:latest \
            --only-fixed --fail-on low ${{ env.ImageName }}

  rpm:
    name: 'Build and test RPM (${{ matrix.container }}:${{ matrix.containerTag }})'
    runs-on: '${{ matrix.os }}'
    strategy:
      matrix:
        os: [ 'ubuntu-22.04' ]
        container: [ 'centos' ]
        containerTag: [ 'stream9' ]

    container:
      image: 'quay.io/${{ matrix.container }}/${{ matrix.container }}:${{ matrix.containerTag }}'
      volumes:
        - ${{github.workspace}}:${{github.workspace}}

    env:
      DNF: ${{github.workspace}}/build

    steps:

      - name: Enable additional package repositories for CentOS 8
        if: ${{ matrix.container == 'centos' && matrix.containerTag == 'stream8' }}
        run: |
          dnf -y install epel-release 'dnf-command(config-manager)'
          dnf config-manager --set-enabled powertools

      - name: Enable additional package repositories for CentOS 9
        if: ${{ matrix.container == 'centos' && matrix.containerTag == 'stream9' }}
        run: |
          dnf -y install epel-release 'dnf-command(config-manager)'
          dnf config-manager --set-enabled crb

      - name: Install packit
        run: |
          dnf install --setopt=tsflags=nodocs --setopt=install_weak_deps=False -y epel-release
          dnf install --setopt=tsflags=nodocs --setopt=install_weak_deps=False -y git packit

      - uses: actions/checkout@v4

      - name: Take ownership of the checkout directory (Git CVE-2022-24765)
        run: chown --recursive --reference=/ .

      - name: Install srpm build dependencies
        run: |
          dnf install --setopt=tsflags=nodocs --setopt=install_weak_deps=False -y 'dnf-command(builddep)'
          dnf builddep --setopt=tsflags=nodocs --setopt=install_weak_deps=False -y packaging/skupper-router.spec

      - name: Build skupper-router src.rpm and the rpm packages
        run: |
          mkdir /tmp/skupper-rpms

          packit srpm
          rpmbuild --rebuild skupper-router*.src.rpm --nocheck --define '_rpmdir /tmp/skupper-rpms' --define 'debug_package %{nil}'

      - name: Install built packages
        run: |
          dnf install -y /tmp/skupper-rpms/*/*.rpm

      - name: Check skrouterd version
        run: |
          skrouterd --version

      - name: Check that skrouterd works
        run: |
          skrouterd -c /dev/empty |& grep "Configuration file could not be opened"

      - name: Check that skmanage works
        run: |
          skmanage --help

      - name: Check that skstat works
        run: |
          skstat --help

      - name: Check that manpages work
        run: |
          dnf install -y man

          man skrouterd
          man skrouterd.conf
          man skstat
          man skmanage

  rat_check:
    name: RAT Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Install JDK ${{ matrix.java }}
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: 11

      - name: RAT Check
        run: mvn apache-rat:check

      - name: Output
        if: ${{ ! cancelled() }}
        run: cat target/rat.txt || echo "Unable to print output"
